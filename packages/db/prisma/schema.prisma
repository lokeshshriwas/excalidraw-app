generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  avatar     String?

  chats         Chat[]
  adminRooms    Room[]        @relation(name: "AdminRelation")
  userRooms     Room[]        @relation(name: "UserRelation") // many-to-many
  joinRequests  JoinRequest[] // join requests made by this user
}

model Room {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())

  chats        Chat[]
  joinRequests JoinRequest[] // join requests for this room
  adminId      String
  admin        User          @relation(name: "AdminRelation", fields: [adminId], references: [id])
  users        User[]        @relation(name: "UserRelation") // many-to-many
}

model JoinRequest {
  id        String            @id @default(uuid())
  roomId    Int
  userId    String
  status    JoinRequestStatus @default(PENDING)
  message   String?           
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  room      Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate requests
  @@unique([roomId, userId])
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  roomId    Int
  message   String
  userId    String
  timeStamp DateTime

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}