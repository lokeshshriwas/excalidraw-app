generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?
  name     String
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats        Chat[]
  adminRooms   Room[]        @relation(name: "AdminRelation")
  userRooms    Room[]        @relation(name: "UserRelation")
  joinRequests JoinRequest[]
  subscription Subscription? // One-to-one relation
}

model Subscription {
  id                 String             @id @default(uuid())
  userId             String             @unique
  planType           PlanType           @default(FREE)
  status             SubscriptionStatus @default(ACTIVE)
  startDate          DateTime           @default(now())
  endDate            DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  mode      RoomMode @default(EDIT) // EDIT or READONLY
  priority  Int      @default(0) // Higher number = higher priority
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats        Chat[]
  joinRequests JoinRequest[]
  adminId      String
  admin        User          @relation(name: "AdminRelation", fields: [adminId], references: [id])
  users        User[]        @relation(name: "UserRelation")
}

model JoinRequest {
  id        String            @id @default(uuid())
  roomId    Int
  userId    String
  status    JoinRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  roomId    Int
  message   String
  userId    String
  timeStamp DateTime

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PlanType {
  FREE
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  TRIALING
}

enum RoomMode {
  EDIT
  READONLY
}
